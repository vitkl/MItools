{
    "collab_server" : "",
    "contents" : "##' Extract binding region feature from cleaned MITAB2.7\n##' @name MITABregionFeature\n##' @import data.table\n##' @param mitab data.table containing data in MITAB2.7 format, standard column names should be made data.table-compatible\n##' @author Vitalii Kleshchevnikov\n##' @return data.table to which the following columns were added: binding_region_A_type, binding_region_A, binding_region_B_type, binding_region_B\nMITABregionFeature = function(mitab){\n  # extracting Features_interactor_A\n  mitab = copy(mitab)\n  mitab = mitab[, .(pair_id,\n                    IDs_interactor_A, IDs_interactor_B,\n                    interactor_IDs_databases_A, interactor_IDs_databases_B,\n                    Taxid_interactor_A, Taxid_interactor_B,\n                    Publication_Identifiers, Confidence_values,\n                    Host_organisms,\n                    bait_prey_status_A, bait_prey_status_B,\n                    Interaction_detection_methods, Interaction_types, Interaction_identifiers, Expansion_methods,\n                    Features_interactor_A, Features_interactor_B,\n                    Identification_method_participant_A, Identification_method_participant_B,\n                    Features_interactor_A_temp = unlist(strsplit(Features_interactor_A, \"\\\\|\"))), by = 1:NROW(mitab)]\n  # extracting Features_interactor_B\n  mitab = mitab[, .(pair_id,\n                    IDs_interactor_A, IDs_interactor_B,\n                    interactor_IDs_databases_A, interactor_IDs_databases_B,\n                    Taxid_interactor_A, Taxid_interactor_B,\n                    Publication_Identifiers, Confidence_values,\n                    Host_organisms,\n                    bait_prey_status_A, bait_prey_status_B,\n                    Interaction_detection_methods, Interaction_types, Interaction_identifiers, Expansion_methods,\n                    Features_interactor_A, Features_interactor_B,\n                    Identification_method_participant_A, Identification_method_participant_B, Features_interactor_A_temp,\n                    Features_interactor_B_temp = unlist(strsplit(Features_interactor_B, \"\\\\|\"))), by = 1:NROW(mitab)]\n  # extracting binding regions from Features_interactor_A\n  mitab[, binding_associated_region_interactor_A := gsub(\"^binding-associated region:|\\\\(.*\\\\)$\", \"\", grep(\"binding-associated region:\", Features_interactor_A_temp, value = T)), by = Features_interactor_A_temp]\n  mitab[, necessary_binding_region_interactor_A := gsub(\"^necessary binding region:|\\\\(.*\\\\)$\", \"\", grep(\"necessary binding region:\", Features_interactor_A_temp, value = T)), by = Features_interactor_A_temp]\n  mitab[, sufficient_binding_region_interactor_A := gsub(\"^sufficient binding region:|\\\\(.*\\\\)$\", \"\", grep(\"sufficient binding region:\", Features_interactor_A_temp, value = T)), by = Features_interactor_A_temp]\n  mitab[, direct_binding_region_interactor_A := gsub(\"^direct binding region:|\\\\(.*\\\\)$\", \"\", grep(\"direct binding region:\", Features_interactor_A_temp, value = T)), by = Features_interactor_A_temp]\n  # collapsing binding regions from Features_interactor_A into 1 column keeping the most detailed annotation\n  mitab[!is.na(direct_binding_region_interactor_A), binding_region_A_type := \"direct_binding_region\"]\n  mitab[!is.na(direct_binding_region_interactor_A), binding_region_A := direct_binding_region_interactor_A]\n  mitab[!is.na(sufficient_binding_region_interactor_A) & is.na(binding_region_A), binding_region_A_type := \"sufficient_binding_region\"]\n  mitab[!is.na(sufficient_binding_region_interactor_A) & is.na(binding_region_A), binding_region_A := sufficient_binding_region_interactor_A]\n  mitab[!is.na(necessary_binding_region_interactor_A) & is.na(binding_region_A), binding_region_A_type := \"necessary_binding_region\"]\n  mitab[!is.na(necessary_binding_region_interactor_A) & is.na(binding_region_A), binding_region_A := necessary_binding_region_interactor_A]\n  mitab[!is.na(binding_associated_region_interactor_A) & is.na(binding_region_A), binding_region_A_type := \"binding_associated_region\"]\n  mitab[!is.na(binding_associated_region_interactor_A) & is.na(binding_region_A), binding_region_A := binding_associated_region_interactor_A]\n\n  # extracting binding regions from Features_interactor_B\n  mitab[, binding_associated_region_interactor_B := gsub(\"^binding-associated region:|\\\\(.*\\\\)$\", \"\", grep(\"binding-associated region:\", Features_interactor_B_temp, value = T)), by = Features_interactor_B_temp]\n  mitab[, necessary_binding_region_interactor_B := gsub(\"^necessary binding region:|\\\\(.*\\\\)$\", \"\", grep(\"necessary binding region:\", Features_interactor_B_temp, value = T)), by = Features_interactor_B_temp]\n  mitab[, sufficient_binding_region_interactor_B := gsub(\"^sufficient binding region:|\\\\(.*\\\\)$\", \"\", grep(\"sufficient binding region:\", Features_interactor_B_temp, value = T)), by = Features_interactor_B_temp]\n  mitab[, direct_binding_region_interactor_B := gsub(\"^direct binding region:|\\\\(.*\\\\)$\", \"\", grep(\"direct binding region:\", Features_interactor_B_temp, value = T)), by = Features_interactor_B_temp]\n  # collapsing binding regions from Features_interactor_B into 1 column keeping the most detailed annotation\n  mitab[!is.na(direct_binding_region_interactor_B), binding_region_B_type := \"direct_binding_region\"]\n  mitab[!is.na(direct_binding_region_interactor_B), binding_region_B := direct_binding_region_interactor_B]\n  mitab[!is.na(sufficient_binding_region_interactor_B) & is.na(binding_region_B), binding_region_B_type := \"sufficient_binding_region\"]\n  mitab[!is.na(sufficient_binding_region_interactor_B) & is.na(binding_region_B), binding_region_B := sufficient_binding_region_interactor_B]\n  mitab[!is.na(necessary_binding_region_interactor_B) & is.na(binding_region_B), binding_region_B_type := \"necessary_binding_region\"]\n  mitab[!is.na(necessary_binding_region_interactor_B) & is.na(binding_region_B), binding_region_B := necessary_binding_region_interactor_B]\n  mitab[!is.na(binding_associated_region_interactor_B) & is.na(binding_region_B), binding_region_B_type := \"binding_associated_region\"]\n  mitab[!is.na(binding_associated_region_interactor_B) & is.na(binding_region_B), binding_region_B := binding_associated_region_interactor_B]\n\n  # split multiple sufficient_binding_region and necessary_binding_region into necessary_binding_regions\n  # spliting necessary_binding_regions Features_interactor_A\n  mitab = mitab[, .(pair_id,\n                    IDs_interactor_A, IDs_interactor_B,\n                    interactor_IDs_databases_A, interactor_IDs_databases_B,\n                    Taxid_interactor_A, Taxid_interactor_B,\n                    Publication_Identifiers, Confidence_values,\n                    Host_organisms,\n                    bait_prey_status_A, bait_prey_status_B,\n                    Interaction_detection_methods, Interaction_types, Interaction_identifiers, Expansion_methods,\n                    Features_interactor_A, Features_interactor_B,\n                    Identification_method_participant_A, Identification_method_participant_B,\n                    Features_interactor_A_temp, Features_interactor_B_temp,\n                    binding_region_A, binding_region_B,\n                    binding_region_A_type, binding_region_B_type,\n                    binding_region_A_temp = unlist(strsplit(binding_region_A, \",\"))), by = 1:NROW(mitab)]\n  # spliting necessary_binding_regions Features_interactor_B\n  mitab = mitab[, .(pair_id,\n                    IDs_interactor_A, IDs_interactor_B,\n                    interactor_IDs_databases_A, interactor_IDs_databases_B,\n                    Taxid_interactor_A, Taxid_interactor_B,\n                    Publication_Identifiers, Confidence_values,\n                    Host_organisms,\n                    bait_prey_status_A, bait_prey_status_B,\n                    Interaction_detection_methods, Interaction_types, Interaction_identifiers, Expansion_methods,\n                    Features_interactor_A, Features_interactor_B,\n                    Identification_method_participant_A, Identification_method_participant_B,\n                    Features_interactor_A_temp, Features_interactor_B_temp,\n                    binding_region_A, binding_region_B,\n                    binding_region_A_type, binding_region_B_type,\n                    binding_region_A_temp,\n                    binding_region_B_temp = unlist(strsplit(binding_region_B, \",\"))), by = 1:NROW(mitab)]\n  # record split region status\n  mitab[grep(\",\", binding_region_A), binding_region_A_type := paste0(\"split_\", binding_region_A_type)]\n  mitab[grep(\",\", binding_region_A), binding_region_A := binding_region_A_temp]\n  mitab[grep(\",\", binding_region_B), binding_region_B_type := paste0(\"split_\", binding_region_B_type)]\n  mitab[grep(\",\", binding_region_B), binding_region_B := binding_region_B_temp]\n\n  # delete \"?-?\" or \"?-423\" or \"453-?\" regions\n  mitab[grep(\"\\\\?\", binding_region_A), binding_region_A_type := \"undetermined_position\"]\n  mitab[grep(\"\\\\?\", binding_region_A), binding_region_A := NA]\n  mitab[grep(\"\\\\?\", binding_region_B), binding_region_B_type := \"undetermined_position\"]\n  mitab[grep(\"\\\\?\", binding_region_B), binding_region_B := NA]\n  # delete n-terminal region information\n  mitab[grep(\"n\", binding_region_A), binding_region_A_type := \"n_terminal_range\"]\n  mitab[grep(\"n\", binding_region_A), binding_region_A := NA]\n  mitab[grep(\"n\", binding_region_B), binding_region_B_type := \"n_terminal_range\"]\n  mitab[grep(\"n\", binding_region_B), binding_region_B := NA]\n  # delete c-terminal region information\n  mitab[grep(\"c\", binding_region_A), binding_region_A_type := \"c_terminal_range\"]\n  mitab[grep(\"c\", binding_region_A), binding_region_A := NA]\n  mitab[grep(\"c\", binding_region_B), binding_region_B_type := \"c_terminal_range\"]\n  mitab[grep(\"c\", binding_region_B), binding_region_B := NA]\n  # delete greater or smaller range information\n  mitab[grep(\">|<\", binding_region_A), binding_region_A_type := \"greater_or_smaller_range\"]\n  mitab[, binding_region_A := gsub(\">|<\", \"\",binding_region_A)]\n  mitab[grep(\">|<\", binding_region_B), binding_region_B_type := \"greater_or_smaller_range\"]\n  mitab[, binding_region_B := gsub(\">|<\", \"\",binding_region_B)]\n  # modify blurry ends (\"75..75-88..88\") to be strict (\"75-88\")\n  mitab[grep(\"\\\\.\\\\.[[:digit:]]+-[[:digit:]]+\\\\.\\\\.\", binding_region_A), binding_region_A_type := paste0(\"blurry_end_\",binding_region_A_type)]\n  mitab[grep(\"\\\\.\\\\.[[:digit:]]+-[[:digit:]]+\\\\.\\\\.\", binding_region_B), binding_region_B_type := paste0(\"blurry_end_\",binding_region_B_type)]\n  mitab[, binding_region_A := gsub(\"\\\\.\\\\.[[:digit:]]+-[[:digit:]]+\\\\.\\\\.\", \"-\", binding_region_A)]\n  mitab[, binding_region_B := gsub(\"\\\\.\\\\.[[:digit:]]+-[[:digit:]]+\\\\.\\\\.\", \"-\", binding_region_B)]\n  # modify blurry ends (\"75-88..88\") to be strict (\"75-88\")\n  mitab[grep(\"-[[:digit:]]+\\\\.\\\\.\", binding_region_A), binding_region_A_type := paste0(\"blurry_end_end_\",binding_region_A_type)]\n  mitab[grep(\"-[[:digit:]]+\\\\.\\\\.\", binding_region_B), binding_region_B_type := paste0(\"blurry_end_end_\",binding_region_B_type)]\n  mitab[, binding_region_A := gsub(\"-[[:digit:]]+\\\\.\\\\.\", \"-\", binding_region_A)]\n  mitab[, binding_region_B := gsub(\"-[[:digit:]]+\\\\.\\\\.\", \"-\", binding_region_B)]\n  # modify blurry ends (\"75..75-88\") to be strict (\"75-88\")\n  mitab[grep(\"\\\\.\\\\.[[:digit:]]+-\", binding_region_A), binding_region_A_type := paste0(\"blurry_end_start_\",binding_region_A_type)]\n  mitab[grep(\"\\\\.\\\\.[[:digit:]]+-\", binding_region_B), binding_region_B_type := paste0(\"blurry_end_start_\",binding_region_B_type)]\n  mitab[, binding_region_A := gsub(\"\\\\.\\\\.[[:digit:]]+-\", \"-\", binding_region_A)]\n  mitab[, binding_region_B := gsub(\"\\\\.\\\\.[[:digit:]]+-\", \"-\", binding_region_B)]\n\n  # split region into the start and the end positions\n  mitab[, c(\"binding_region_A_start\", \"binding_region_A_end\") := tstrsplit(binding_region_A, \"-\")]\n  mitab[, c(\"binding_region_B_start\", \"binding_region_B_end\") := tstrsplit(binding_region_B, \"-\")]\n\n  # select final set of columns\n  mitab = mitab[, .(pair_id,\n                    IDs_interactor_A, IDs_interactor_B,\n                    interactor_IDs_databases_A, interactor_IDs_databases_B,\n                    Taxid_interactor_A, Taxid_interactor_B,\n                    Publication_Identifiers, Confidence_values,\n                    Host_organisms,\n                    bait_prey_status_A, bait_prey_status_B,\n                    Interaction_detection_methods, Interaction_types, Interaction_identifiers, Expansion_methods,\n                    Features_interactor_A, Features_interactor_B,\n                    Identification_method_participant_A, Identification_method_participant_B,\n                    binding_region_A_start, binding_region_A_end, binding_region_B_start, binding_region_B_end,\n                    binding_region_A_type, binding_region_B_type)]\n  return(unique(mitab))\n}\n",
    "created" : 1500394273185.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3349399208",
    "id" : "C0F2B107",
    "lastKnownWriteTime" : 1500399165,
    "last_content_update" : 1500399165178,
    "path" : "~/Desktop/vitalii/viral_project/MItools/R/MITABregionFeature.R",
    "project_path" : "R/MITABregionFeature.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 17,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}