{
    "collab_server" : "",
    "contents" : "##' Use PSICQUIC to query for molecular interactions (using MIQL, specifying database and output format)\n##' @name queryPSICQUIC\n##' @author Vitalii Kleshchevnikov\n##' @description query_PSICQUIC function queries a specified molecular interaction database using MIQL query language, retrieves the data in a specified format and saves it to a file\n##' @details See \\url{https://psicquic.github.io/MiqlReference.html} or \\url{https://psicquic.github.io/MiqlReference27.html} for the description of MIQL query language.\n##' @details Unlike rawQuery function from PSICQUIC package this function allows to use all IMEx databases by passing \"imex\" to database argument and also separates the choice of output format from the query. Output format options: \\url{https://psicquic.github.io/formats.html}\n##' @details This function also splits large query result into chunks (2500 interactions) to limit the load on the PSICQUIC servers.\n##' @details List of data provider names accepted by the function: \"imex\", \"APID Interactomes\", \"BioGrid\", \"bhf-ucl\", \"ChEMBL\", \"HPIDb\", \"InnateDB\", \"InnateDB-All\", \"IntAct\", \"mentha\", \"MPIDB\", \"MatrixDB\", \"MINT\", \"Reactome\", \"Reactome-FIs\", \"EBI-GOA-miRNA\", \"I2D\", \"I2D-IMEx\", \"InnateDB-IMEx\", \"MolCon\", \"UniProt\", \"MBInfo\", \"VirHostNet\", \"BAR\", \"EBI-GOA-nonIntAct\", \"ZINC\"\n##' @param query search query in MIQL query language, as you would type in PSICQUIC View client: \\url{http://www.ebi.ac.uk/Tools/webservices/psicquic/view/home.xhtml}\n##' @param format output format (most widely used tabular format is tab25, use tab27 for more data columns)\n##' @param database PSICQUIC service (full list: \\url{http://www.ebi.ac.uk/Tools/webservices/psicquic/registry/registry?action=STATUS}), use \"imex\" shorthand to choose all IMEx databases\n##' @param file file name and directory to save the result (\"/dir/filename\")\n##' @return saves query result to a file, returns the query settings, how many interactions per database retrieved and which databases are inactive\n##' @import data.table\n##' @import PSICQUIC\n##' @export queryPSICQUIC\n##' @examples queryPSICQUIC(query = \"id:P74565 AND detmethod:\\\"MI:0018\\\"\",\n##'                format = \"tab27\",\n##'                database = \"imex\",\n##'                file = \"P74565_2H_interactions_imex_tab27.tsv\")\n##'\n##' @examples queryPSICQUIC(query = \"id:P74565 AND detmethod:\\\"MI:0018\\\"\",\n##'                format = \"tab25\",\n##'                database = \"mentha\",\n##'                file = \"P74565_2H_interactions_mentha_tab25.tsv\")\n##'\n##' @examples queryPSICQUIC(query = \"id:P74565\",\n##'                format = \"tab25\",\n##'                database = \"mentha\",\n##'                file = \"P74565_2H_interactions_mentha_tab25.tsv\")\n##'\n##' @examples queryPSICQUIC(query = \"id:156\",\n##'                format = \"tab25\",\n##'                database = \"BioGrid\",\n##'                file = \"entrezgene156_interactions_BioGrid_tab25.tsv\")\n##'\n##' @author Vitalii Kleshchevnikov\nqueryPSICQUIC = function(query, format, database, file){\n  ## Load PSICQUIC functionality\n  psicquic <- PSICQUIC()\n  providers <- providers(psicquic)\n  if(database == \"imex\"){\n    ## Choose IMEx databases\n    databases <- c(\"IntAct\", \"MINT\", \"bhf-ucl\", \"MPIDB\", \"MatrixDB\",\n                   \"HPIDb\",\"I2D-IMEx\",\"InnateDB-IMEx\", \"MolCon\", \"UniProt\", \"MBInfo\")\n  }\n  if(database != \"imex\"){\n    databases = database\n  }\n\n  query = gsub(\"\\\"\",\"%22\", query)\n\n  SPECIES_ID_interactome = data.table()\n  N_SPECIES_ID_interactome = character(length = length(databases))\n  NO_DATABASE = character(length = length(databases))\n  for(indices in 1:length(databases)) {\n    if(databases[indices] %in% providers) {\n      ## Query for the number of interactions\n      PSICQUIC_query1 = paste0(query, \"?format=count\")\n      N_interactions <- unlist(rawQuery(psicquic, databases[indices], PSICQUIC_query1))\n      ## if there are any interactions - Query for the interactions by 2500 at a time\n      if(N_interactions > 0){\n        N_start = 1\n        N_nrows = 2500\n        for(n_starts in seq(from = N_start, to = N_interactions, by = N_nrows)){\n          PSICQUIC_query2 = paste0(query, \"?format=\",format,\"&firstResult=\", n_starts,\n                                   \"&maxResults=\", N_nrows)\n          SPECIES_ID_interactome_d <- as.data.table(rawQuery(psicquic, databases[indices], PSICQUIC_query2))\n          SPECIES_ID_interactome <- rbind(SPECIES_ID_interactome, SPECIES_ID_interactome_d)\n        }\n      }\n      # record how many interactions per database\n      N_SPECIES_ID_interactome[indices] = N_interactions\n    }\n    ## record if the database is not active\n    else {\n      NO_DATABASE[indices] = databases[indices]\n    }\n  }\n\n  # add informative header for MI-TAB 2.7\n  if(format == \"tab27\") colnames(SPECIES_ID_interactome) = unlist(strsplit(readLines(\"ftp://ftp.ebi.ac.uk/pub/databases/intact/current/psimitab/intact.txt\",  n = 1), \"\\t\"))\n\n  # write results to table\n  if(nrow(SPECIES_ID_interactome) > 0) fwrite(SPECIES_ID_interactome, file, sep = \"\\t\") else message(\"no interactions matching your query\")\n\n  # returns the query settings, how many interactions per database retrieved and which databases are inactive\n  res_summary = data.table(query = query,\n                           file = file,\n                           format = format,\n                           all.databases = databases,\n                           n.interactions.in.database = N_SPECIES_ID_interactome,\n                           database.not.active = NO_DATABASE)\n  return(res_summary)\n}\n",
    "created" : 1499442693581.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3484522246",
    "id" : "6671BC2D",
    "lastKnownWriteTime" : 1500047223,
    "last_content_update" : 1500047223370,
    "path" : "~/Desktop/vitalii/viral_project/MItools/R/queryPSICQUIC.R",
    "project_path" : "R/queryPSICQUIC.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}