N_interactions <- unlist(rawQuery(psicquic, databases[indices],
PSICQUIC_query1))
if (N_interactions > 0) {
N_start = 1
N_nrows = 2500
for (n_starts in seq(from = N_start, to = N_interactions,
by = N_nrows)) {
PSICQUIC_query2 = paste0(query, "?format=",
format, "&firstResult=", n_starts, "&maxResults=",
N_nrows)
SPECIES_ID_interactome_d <- as.data.table(rawQuery(psicquic,
databases[indices], PSICQUIC_query2))
SPECIES_ID_interactome <- rbind(SPECIES_ID_interactome,
SPECIES_ID_interactome_d)
}
}
N_SPECIES_ID_interactome[indices] = N_interactions
}
else {
NO_DATABASE[indices] = databases[indices]
}
}
queryPSICQUIC(query = "id:P74565 AND detmethod:\"MI:0018\"", format = "tab27", database = "bhf-ucl")
N_SPECIES_ID_interactome
SPECIES_ID_interactome
unlist(rawQuery(psicquic, databases[indices],
PSICQUIC_query1))
psicquic
databases[indices]
?rawQuery
PSICQUIC_query1
N_interactions > 0
if (databases[indices] %in% providers) {
PSICQUIC_query1 = paste0(query, "?format=count")
N_interactions <- unlist(rawQuery(psicquic, databases[indices],
PSICQUIC_query1))
if (N_interactions > 0) {
N_start = 1
N_nrows = 2500
for (n_starts in seq(from = N_start, to = N_interactions,
by = N_nrows)) {
PSICQUIC_query2 = paste0(query, "?format=",
format, "&firstResult=", n_starts, "&maxResults=",
N_nrows)
SPECIES_ID_interactome_d <- as.data.table(rawQuery(psicquic,
databases[indices], PSICQUIC_query2))
SPECIES_ID_interactome <- rbind(SPECIES_ID_interactome,
SPECIES_ID_interactome_d)
}
}
N_SPECIES_ID_interactome[indices] = N_interactions
}
queryPSICQUIC(query = "id:P74565 AND detmethod:\"MI:0018\"", format = "tab27", database = "bhf-ucl")
library(roxygen2)
library(devtools)
document()
install()
queryPSICQUIC(query = "id:P74565 AND detmethod:\"MI:0018\"", format = "tab27", database = "bhf-ucl")
queryPSICQUICrlib(query = "id:P74565 AND detmethod:\"MI:0018\"", format = "tab27", database = "bhf-ucl")
queryPSICQUICrlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27", database = "bhf-ucl"
file = "P74565_2H_interactions_imex_tab27.tsv")
queryPSICQUICrlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27", database = "bhf-ucl",
file = "P74565_2H_interactions_imex_tab27.tsv")
queryPSICQUIC(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27", database = "bhf-ucl",
file = "P74565_2H_interactions_imex_tab27.tsv")
# retrieve all VirHostNet data
VirHostNet = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
database = "IntAct",
clean = TRUE, protein_only = TRUE,
directory = "./data_files/")
rm(list = ls())
# read all IntAct data (filter later)
IntAct = loadIntActFTP(dir = "./data_files/IntActRelease_2018Aug7/")
# filter for viral-human interaction
human_viral = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
database = "IntActFTP", MITABdata = IntAct,
clean = TRUE, protein_only = TRUE,
directory = "./data_files/",
releaseORdate = "2018Aug7")
# filter for viral-human interaction
human_viral = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
database = "IntActFTP", MITABdata = IntAct,
clean = TRUE, protein_only = TRUE,
directory = "./data_files/",
releaseORdate = "2018Aug7")
httr::headers(httr::GET("https://www.uniprot.org/"))
?interSpeciesInteractome
# filter for viral-human interaction
human_viral = interSpeciesInteractome(MITABdata = IntAct,
taxid1 = 9606,  taxid2 = 10239,
database = "IntActFTP",
clean = TRUE, protein_only = TRUE,
directory = "./data_files/",
releaseORdate = "2018Aug7")
human_viral
uniqueNinteractions(human_viral)
uniqueNinteractors(human_viral, taxid = 9606)
uniqueNinteractions(human_viral)
uniqueNinteractors(human_viral, taxid = 9606)
uniqueNinteractors(human_viral, taxid = 9606, inverse_filter = T)
# figure out new query for between species interactions
queryPSICQUIC(query = "(taxidA:9606 AND taxidB:10239) OR (taxidA:10239 AND ", "taxidB:9606)",
format = "tab27", database = "IntAct",
file = "P74565_2H_interactions_imex_tab27.tsv")
# figure out new query for between species interactions
queryPSICQUIC(query = "(taxidA:9606 AND taxidB:10239) OR (taxidA:10239 AND taxidB:9606)",
format = "tab27", database = "IntAct",
file = "P74565_2H_interactions_imex_tab27.tsv")
# figure out new query for between species interactions
queryPSICQUIC(query = "(taxidA:9606 AND taxidB:10239) OR (taxidA:10239 AND taxidB:9606)",
format = "tab27", database = "VirHostNet",
file = "P74565_2H_interactions_imex_tab27.tsv")
fread("http://virhostnet.prabi.fr:9090/psicquic/webservices/current/search/query/*")
queryPSICQUIC(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
file = "P74565_2H_interactions_imex_tab27.tsv")
?queryPSICQUICrlib
queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = "2018Aug7")
queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
VirHostNet_raw = cleanMITAB(VirHostNet_raw)
biogrid = fread("/Users/vk7/Downloads/BIOGRID-ALL-3.5.166.mitab.txt")
setnames(biogrid, colnames(biogrid),
colnames(IntAct$data)[1:15])
biogrid = list(data = biogrid, metadata = "full_biogrid_18_nov_2018")
class(biogrid) = "RAW_MItab25"
biogrid_vir = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
MITABdata = biogrid,
clean = TRUE, protein_only = FALSE,
directory = "./data_files/")
library(roxygen2)
library(devtools)
document()
install()
knitr::opts_chunk$set(echo = TRUE)
packages = c("MItools", "downloader", "parallel", "R.utils", "PSICQUIC", "Biostrings", "BiocGenerics", "GenomeInfoDb", "GenomicRanges", "qvalue", "rtracklayer", "ggplot2")
# install packages if not available
if(mean(packages %in% names(installed.packages()[,"Package"])) != 1){
packages_to_install = packages[!packages %in% names(installed.packages()[,"Package"])]
# specifying mirror is necessary for some Linux systems
install.packages(packages_to_install, dependencies = T, repos = "http://mirrors.ebi.ac.uk/CRAN/")
packages_to_install = packages[!packages %in% names(installed.packages()[,"Package"])]
source("https://bioconductor.org/biocLite.R")
biocLite(packages_to_install)
devtools::install_github("vitkl/MItools", dependencies = T)
}
suppressPackageStartupMessages({
library(MItools)
library(parallel)
library(downloader)
library(ggplot2)
})
biogrid_vir = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
MITABdata = biogrid,
clean = TRUE, protein_only = FALSE,
directory = "./data_files/")
biogrid_vir = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
MITABdata = biogrid,
clean = TRUE, protein_only = FALSE,
directory = "./data_files/")
biogrid_vir
uniqueNinteractions(biogrid_vir)
uniqueNinteractors(biogrid_vir, taxid = 9606)
uniqueNinteractors(biogrid_vir, taxid = 9606, inverse_filter = T)
VirHostNet_raw = queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
VirHostNet_raw = cleanMITAB(VirHostNet_raw)
uniqueNinteractions(biogrid_vir)
uniqueNinteractors(biogrid_vir, taxid = 9606)
uniqueNinteractors(biogrid_vir, taxid = 9606, inverse_filter = T)
uniqueNinteractions(VirHostNet_raw)
uniqueNinteractors(VirHostNet_raw, taxid = 9606)
uniqueNinteractors(VirHostNet_raw, taxid = 9606, inverse_filter = T)
VirHostNet_raw = queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
VirHostNet = cleanMITAB(VirHostNet_raw)
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
# Find which interactions are uniquely present in VirHostNet (not IntAct)
VirHostNet$data = VirHostNet$data[!pair_id %in% human_viral$data$pair_id]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
human_viral$data
VirHostNet$data
VirHostNet$data = VirHostNet$data[!pair_id %in% human_viral$data$pair_id]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
VirHostNet$data = VirHostNet$data[!pair_id %in% human_viral$data$pair_id]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
grep("-", VirHostNet$data$IDs_interactor_A, value = T)
grep("-", human_viral$data$IDs_interactor_A, value = T)
# which does not understand taxonomy hierarhy so interSpeciesInteractome() will not work
VirHostNet_raw = queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
VirHostNet = cleanMITAB(VirHostNet_raw)
# filter out human-human and viral-viral interactions
VirHostNet$data = VirHostNet$data[Taxid_interactor_A == Taxid_interactor_B]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
VirHostNet_raw = queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
VirHostNet = cleanMITAB(VirHostNet_raw)
# filter out human-human and viral-viral interactions
VirHostNet$data = VirHostNet$data[!Taxid_interactor_A == Taxid_interactor_B]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
# Find which interactions are uniquely present in VirHostNet (not IntAct)
VirHostNet$data = VirHostNet$data[!pair_id %in% human_viral$data$pair_id]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
grep("-", VirHostNet$data$IDs_interactor_A, value = T)
grep("-", VirHostNet$data$IDs_interactor_B, value = T)
VirHostNet_raw = queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
VirHostNet = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
MITABdata = VirHostNet_raw,
clean = TRUE, protein_only = FALSE,
directory = "./data_files/")
VirHostNet
# filter out human-human and viral-viral interactions
VirHostNet$data = VirHostNet$data[!Taxid_interactor_A == Taxid_interactor_B]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
# retrieve all VirHostNet data
# which does not understand taxonomy hierarhy so interSpeciesInteractome() will not work
VirHostNet_raw = queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
VirHostNet_raw
VirHostNet = cleanMITAB(VirHostNet_raw)
VirHostNet
VirHostNet$data[Taxid_interactor_A == 9606 | Taxid_interactor_B == 9606]
VirHostNet$data[Taxid_interactor_A == 9606 & Taxid_interactor_B != 9606 |
Taxid_interactor_B == 9606 & Taxid_interactor_A != 9606]
VirHostNet2 = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
MITABdata = VirHostNet_raw,
clean = TRUE, protein_only = FALSE,
directory = "./data_files/")
VirHostNet2$data$Taxid_interactor_A
VirHostNet2$data$Taxid_interactor_B
VirHostNet$data[!Taxid_interactor_A %in% VirHostNet2$data$Taxid_interactor_B |
!Taxid_interactor_B %in% VirHostNet2$data$Taxid_interactor_B,
c(Taxid_interactor_A, Taxid_interactor_B)]
VirHostNet$data[!Taxid_interactor_A %in% VirHostNet2$data$Taxid_interactor_B |
!Taxid_interactor_B %in% VirHostNet2$data$Taxid_interactor_B,
unique(c(Taxid_interactor_A, Taxid_interactor_B))]
loadTaxIDAllLower("10239")
loadTaxIDAllLower("10239", "./")
viral_taxid = loadTaxIDAllLower("10239", "./")
viral_taxid
VirHostNet$data[!Taxid_interactor_A %in% VirHostNet2$data$Taxid_interactor_B |
!Taxid_interactor_B %in% VirHostNet2$data$Taxid_interactor_B,
unique(c(Taxid_interactor_A, Taxid_interactor_B))] %in% viral_taxid
VirHostNet$data[!Taxid_interactor_A %in% VirHostNet2$data$Taxid_interactor_B |
!Taxid_interactor_B %in% VirHostNet2$data$Taxid_interactor_B,
unique(c(Taxid_interactor_A, Taxid_interactor_B))] %in% viral_taxid$AllLower
VirHostNet$data[Taxid_interactor_A == 9606 & Taxid_interactor_B %in% viral_taxid |
Taxid_interactor_B == 9606 & Taxid_interactor_A %in% viral_taxid]
VirHostNet$data[Taxid_interactor_A == 9606 & Taxid_interactor_B %in% viral_taxid$AllLower |
Taxid_interactor_B == 9606 & Taxid_interactor_A %in% viral_taxid$AllLower]
# retrieve all VirHostNet data
# which does not understand taxonomy hierarhy so interSpeciesInteractome() will not work
VirHostNet_raw = queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
VirHostNet2 = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
MITABdata = VirHostNet_raw,
clean = TRUE, protein_only = FALSE,
directory = "./data_files/")
VirHostNet2
# retrieve all VirHostNet data
# which does not understand taxonomy hierarhy so interSpeciesInteractome() will not work
VirHostNet_raw = queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
debug(interSpeciesInteractome)
VirHostNet2 = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
MITABdata = VirHostNet_raw,
clean = TRUE, protein_only = FALSE,
directory = "./data_files/")
taxids2
full_interactome$data
full_interactome$data
full_interactome$data[(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1), ]
full_interactome$data
taxids1
full_interactome$data[(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1) ]
full_interactome$data[,(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1) ]
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1) ]
261268 %in% taxids2
viral_taxid = loadTaxIDAllLower("10239", "./")
mean(taxids2 %in% viral_taxid$AllLower)
mean(taxids2 %in% c(viral_taxid$AllLower, viral_taxid$input_taxid))
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1) ]
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1), (Taxid_interactor_A_clean %in% taxids1 &
Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 &
Taxid_interactor_B_clean %in% taxids1) ]
taxids1
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1), (Taxid_interactor_A_clean %in% taxids1 &
Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 &
Taxid_interactor_B_clean %in% taxids1) ]
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1) ]
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1), (Taxid_interactor_A_clean %in% taxids1 &
Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 &
Taxid_interactor_B_clean %in% taxids1) ][1:5, 23246:23250]
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1), (Taxid_interactor_A_clean %in% taxids1 &
Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 &
Taxid_interactor_B_clean %in% taxids1) ][c(1:5, 23246:23250)]
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1), (Taxid_interactor_A_clean %in% taxids1 &
Taxid_interactor_B_clean %in% taxids2) ][c(1:5, 23246:23250)]
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1), Taxid_interactor_A_clean %in% taxids1 ][c(1:5, 23246:23250)]
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1), Taxid_interactor_B_clean %in% taxids2][c(1:5, 23246:23250)]
full_interactome$data[!(Taxid_interactor_A_clean %in%
taxids1 & Taxid_interactor_B_clean %in% taxids2) |
(Taxid_interactor_A_clean %in% taxids2 & Taxid_interactor_B_clean %in%
taxids1), Taxid_interactor_B_clean][c(1:5, 23246:23250)]
363744 %in% viral_taxid$AllLower
363744 %in% taxids2
"363744" %in% taxids2
mean(taxids2 %in% viral_taxid$AllLower)
taxids2[1:5]
363744 %in% as.character(taxids2)
363744 %in% viral_taxid$AllLower
mean(taxids2 %in% c(viral_taxid$AllLower, viral_taxid$input_taxid))
363744 %in% c(viral_taxid$AllLower, viral_taxid$input_taxid)
mean(c(viral_taxid$AllLower, viral_taxid$input_taxid) %in% taxids2)
length(c(viral_taxid$AllLower, viral_taxid$input_taxid))
length(unique(c(viral_taxid$AllLower, viral_taxid$input_taxid)))
length(unique(taxids2))
?interSpeciesInteractome
knitr::opts_chunk$set(echo = TRUE)
packages = c("MItools", "downloader", "parallel", "R.utils", "PSICQUIC", "Biostrings", "BiocGenerics", "GenomeInfoDb", "GenomicRanges", "qvalue", "rtracklayer", "ggplot2")
# install packages if not available
if(mean(packages %in% names(installed.packages()[,"Package"])) != 1){
packages_to_install = packages[!packages %in% names(installed.packages()[,"Package"])]
# specifying mirror is necessary for some Linux systems
install.packages(packages_to_install, dependencies = T, repos = "http://mirrors.ebi.ac.uk/CRAN/")
packages_to_install = packages[!packages %in% names(installed.packages()[,"Package"])]
source("https://bioconductor.org/biocLite.R")
biocLite(packages_to_install)
devtools::install_github("vitkl/MItools", dependencies = T)
}
suppressPackageStartupMessages({
library(MItools)
library(parallel)
library(downloader)
library(ggplot2)
})
# retrieve all VirHostNet data
# which does not understand taxonomy hierarhy so interSpeciesInteractome() will not work
VirHostNet_raw = queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
# retrieve all VirHostNet data
# which does not understand taxonomy hierarhy so interSpeciesInteractome() will not work
VirHostNet_raw = queryPSICQUICrlib(query = "taxid:9606",
format = "tab27", database = "VirHostNet",
directory = "./data_files/",
releaseORdate = NULL)
VirHostNet2 = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
MITABdata = VirHostNet_raw,
clean = TRUE, protein_only = FALSE,
directory = "./data_files/")
VirHostNet2
# filter out human-human and viral-viral interactions
VirHostNet$data = VirHostNet$data[!Taxid_interactor_A == Taxid_interactor_B]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
# Find which interactions are uniquely present in VirHostNet (not IntAct)
VirHostNet$data = VirHostNet$data[!pair_id %in% human_viral$data$pair_id]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
VirHostNet$data
VirHostNet2 = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
MITABdata = VirHostNet_raw,
clean = TRUE, protein_only = TRUE,
directory = "./data_files/")
VirHostNet = interSpeciesInteractome(taxid1 = 9606,  taxid2 = 10239,
MITABdata = VirHostNet_raw,
clean = TRUE, protein_only = TRUE,
directory = "./data_files/")
# filter out human-human and viral-viral interactions
VirHostNet$data = VirHostNet$data[!Taxid_interactor_A == Taxid_interactor_B]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
# Find which interactions are uniquely present in VirHostNet (not IntAct)
VirHostNet$data = VirHostNet$data[!pair_id %in% human_viral$data$pair_id]
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
VirHostNet$data
uniqueNinteractions(VirHostNet)
uniqueNinteractors(VirHostNet, taxid = 9606)
uniqueNinteractors(VirHostNet, taxid = 9606, inverse_filter = T)
human_viral$data
?BiocManager::install()
BiocManager::install("vitkl/ParetoTI")
library(pkgdown)
pkgdown::build_site()
unlink("/Users/vk7/Library/R/3.5/library/MItools/data/IntActRelease_2019Mar23/intact2019Mar23.txt.tmp")
rm(list = ls())
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
packages = c("MItools", "downloader", "parallel", "R.utils", "PSICQUIC", "Biostrings", "BiocGenerics", "GenomeInfoDb", "GenomicRanges", "qvalue", "rtracklayer", "ggplot2")
# install packages if not available
if(mean(packages %in% names(installed.packages()[,"Package"])) != 1){
packages_to_install = packages[!packages %in% names(installed.packages()[,"Package"])]
# specifying mirror is necessary for some Linux systems
install.packages(packages_to_install, dependencies = T, repos = "http://mirrors.ebi.ac.uk/CRAN/")
packages_to_install = packages[!packages %in% names(installed.packages()[,"Package"])]
source("https://bioconductor.org/biocLite.R")
biocLite(packages_to_install)
devtools::install_github("vitkl/MItools", dependencies = T)
}
suppressPackageStartupMessages({
library(MItools)
library(parallel)
library(downloader)
library(ggplot2)
})
# read all BioGRID data
download.file("https://downloads.thebiogrid.org/Download/BioGRID/Release-Archive/BIOGRID-3.5.166/BIOGRID-ALL-3.5.166.mitab.zip",
"./data_files/BIOGRID-ALL-3.5.166.mitab.zip")
unzip("./data_files/BIOGRID-ALL-3.5.166.mitab.zip")
biogrid = fread("./data_files/BIOGRID-ALL-3.5.166.mitab.txt")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
