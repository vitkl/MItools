install()
trh = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
library(MItools)
trh = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
trh
library(roxygen2)
library(devtools)
document()
install()
library(MItools)
trh = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
trh
all.equal(trh[,1], trh[,2])
library(devtools)
library(roxygen2)
document()
install()
library(MItools)
trh = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
trh
library(devtools)
library(roxygen2)
document()
install()
library(devtools)
library(roxygen2)
document()
document()
document()
library(devtools)
library(roxygen2)
document()
document()
document()
getwd()
library(devtools)
library(roxygen2)
document()
install()
viral_human_net_w_domains = fread("./processed_data_files/viral_human_net_w_domains", sep = "\t", stringsAsFactors = F)
# generate minimal information tables
viral_human_net = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_interactor_viral_degree)])
datatable(viral_human_net)
domains_proteins = unique(viral_human_net_w_domains[,.(IDs_interactor_human, IDs_domain_human, domain_type, domain_frequency)])
datatable(domains_proteins)
viral_human_net_w_domains = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, fold_enrichment)])
datatable(viral_human_net_w_domains)
library(data.table)
viral_human_net_w_domains = fread("./processed_data_files/viral_human_net_w_domains", sep = "\t", stringsAsFactors = F)
# generate minimal information tables
viral_human_net = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_interactor_viral_degree)])
datatable(viral_human_net)
domains_proteins = unique(viral_human_net_w_domains[,.(IDs_interactor_human, IDs_domain_human, domain_type, domain_frequency)])
datatable(domains_proteins)
viral_human_net_w_domains = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, fold_enrichment)])
datatable(viral_human_net_w_domains)
viral_human_net_w_domains = fread("../viral_project/processed_data_files/viral_human_net_w_domains", sep = "\t", stringsAsFactors = F)
# generate minimal information tables
viral_human_net = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_interactor_viral_degree)])
datatable(viral_human_net)
domains_proteins = unique(viral_human_net_w_domains[,.(IDs_interactor_human, IDs_domain_human, domain_type, domain_frequency)])
datatable(domains_proteins)
viral_human_net_w_domains = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, fold_enrichment)])
datatable(viral_human_net_w_domains)
library(MItools)
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
traceback()
library(devtools)
library(roxygen2)
document()
install()
document()
install()
library(MItools)
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
library(devtools)
library(rox)
library(roxygen2)
document()
install()
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
document()
install()
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
traceback()
document()
install()
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
domains_proteins = unique(viral_human_net_w_domains[,.(IDs_interactor_human, IDs_domain_human, domain_frequency)])
library(data.table)
domains_proteins = unique(viral_human_net_w_domains[,.(IDs_interactor_human, IDs_domain_human, domain_frequency)])
library(data.table)
domains_proteins = unique(viral_human_net_w_domains[,.(IDs_interactor_human, IDs_domain_human, domain_frequency)])
viral_human_net_w_domains = fread("./processed_data_files/viral_human_net_w_domains", sep = "\t", stringsAsFactors = F)
# generate minimal information tables
viral_human_net = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_interactor_viral_degree)])
datatable(viral_human_net)
domains_proteins = unique(viral_human_net_w_domains[,.(IDs_interactor_human, IDs_domain_human, domain_frequency)])
datatable(domains_proteins)
viral_human_net_w_domains = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, fold_enrichment)])
datatable(viral_human_net_w_domains)
viral_human_net_w_domains
viral_human_net_w_domains = fread("../viral_project/processed_data_files/viral_human_net_w_domains", sep = "\t", stringsAsFactors = F)
# generate minimal information tables
viral_human_net = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_interactor_viral_degree)])
datatable(viral_human_net)
domains_proteins = unique(viral_human_net_w_domains[,.(IDs_interactor_human, IDs_domain_human, domain_frequency)])
datatable(domains_proteins)
viral_human_net_w_domains = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, fold_enrichment)])
datatable(viral_human_net_w_domains)
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
fegrah
str(fegrah)
document()
install()
document()
install()
library(MItools)
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
fegrah
str(fegrah)
class(fegrah)
fegrah = as.data.table(foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL))
fegrah
fegrah = as.data.table(foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL), rownames = "IDs_interactor_viral")
fegrah
?as.data.table
fegrah = as.data.table(foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL), keep.rownames = "IDs_interactor_viral")
fegrah
microbenchmark::microbenchmark(fegrah = as.data.table(foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 200, cores = NULL), keep.rownames = "IDs_interactor_viral"))
matrix(0, 714, 20000)
x = matrix(0, 714, 200000)
x = matrix(0, 714, 500000)
rm(x)
net = copy(viral_human_net); protein_annot = copy(domains_proteins)
N = 1000
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
cores = NULL
library(data.table)
library(BiocGenerics)
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
clusterEvalQ(cl, {library(data.table); library(MItools)})
clusterExport(cl, c("net", "protein_annot"), envir=environment())
fold_enrichment_dist = parReplicate(cl, n = N,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
stopCluster(cl)
fold_enrichment_dist
as.data.table(fold_enrichment_dist)
N = 200
fold_enrichment_dist = parReplicate(cl, n = N,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
############################
microbenchmark::microbenchmark({
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 2500,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
},{
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 50,
expr = {
replicate(50,{
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},simplify=TRUE, USE.NAMES=TRUE)
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
}
)
?replicate
############################
microbenchmark::microbenchmark({
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 2500,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
},{
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 50,
expr = {
replicate(50,{
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
})
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
}
)
?microbenchmark::microbenchmark
############################
microbenchmark::microbenchmark({
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 900,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
},{
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 30,
expr = {
replicate(30,{
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
})
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
}, times = 25
)
############################
microbenchmark::microbenchmark({
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 900,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
},{
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 900,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=F)
# stop the cluster
stopCluster(cl)
}, times = 25
)
17.08764 *
7
(17.08764 / 900) * 100000
((17.08764 / 900) * 100000)/60
dim(fold_enrichment_dist)
N
# set up parallel processing
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = N,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
fold_enrichment_dist
fold_enrichment_dist = as.data.table(fold_enrichment_dist)
# set up parallel processing
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = N,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
fold_enrichment_dist = as.data.table(fold_enrichment_dist, keep.rownames = IDs_interactor_viral)
fold_enrichment_dist = as.data.table(fold_enrichment_dist, keep.rownames = "IDs_interactor_viral")
fold_enrichment_dist
paste0("V", 1:N)
ghfh = old_enrichment_dist[, .(IDs_interactor_viral, sampled_fold_enrichment = strsplit(.SD, "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh = fold_enrichment_dist[, .(IDs_interactor_viral, sampled_fold_enrichment = strsplit(.SD, "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = strsplit(V1, "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(V1, "\\|"))), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh
fold_enrichment_dist[,1:2]
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(c(V1,V2), "\\|"))), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(IDs_interactor_viral, sampled_fold_enrichment = strsplit(c(.SD), "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
paste0("V", 1:N)
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = strsplit(c(.SD), "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(c(V1,V2), "\\|"))), .SDcols = c("V1", "V2"), by = IDs_interactor_viral]
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(c(.SD), "\\|"))), .SDcols = c("V1", "V2"), by = IDs_interactor_viral]
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(c(unlist(.SD)), "\\|"))), .SDcols = c("V1", "V2"), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(unlist(.SD), "\\|"))), .SDcols = c("V1", "V2"), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(unlist(.SD), "\\|"))), .SDcols = c("V1", "V2", "V54"), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = strsplit(unlist(.SD), "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(unlist(.SD), "\\|"))), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh
gc()
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
fegrah\
fegrah
library(devtools)
library(roxygen2)
document()
install()
rm(list = gc())
rm(list = ls()
)
gc()
gc()
library(MItools)
viral_human_net_w_domains = fread("../viral_project/processed_data_files/viral_human_net_w_domains", sep = "\t", stringsAsFactors = F)
# generate minimal information tables
viral_human_net = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_interactor_viral_degree)])
datatable(viral_human_net)
domains_proteins = unique(viral_human_net_w_domains[,.(IDs_interactor_human, IDs_domain_human, domain_frequency)])
datatable(domains_proteins)
viral_human_net_w_domains = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, fold_enrichment)])
datatable(viral_human_net_w_domains)
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
fegrah
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 1000, cores = NULL)
fegrah
barplot(fegrah$IDs_interactor_viral)
hist(fegrah$IDs_interactor_viral)
hist(fegrah$sampled_fold_enrichment)
hist(as.numeric(fegrah$sampled_fold_enrichment))
hist(as.numeric(fegrah[IDs_interactor_viral == "A0A0K1LEV0",sampled_fold_enrichment]))
hist(as.numeric(fegrah[IDs_interactor_viral == "W6AVY5",sampled_fold_enrichment]))
fegrah = union()
fegrah = unique(fegrah)
fegrah
hist(as.numeric(fegrah[IDs_interactor_viral == "W6AVY5",sampled_fold_enrichment]))
hist(as.numeric(fegrah[IDs_interactor_viral == "A0A0K1LEV0",sampled_fold_enrichment]))
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 10000, cores = NULL)
library(devtools)
library(roxygen2)
document()
install()
library(MItools)
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 10000, cores = NULL)
fegrah
library(devtools)
library(roxygen2)
document()
getwd()
setwd("/MItools/")
setwd("MItools")
