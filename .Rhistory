cl <- makeCluster(cores)
clusterEvalQ(cl, {library(data.table); library(MItools)})
clusterExport(cl, c("net", "protein_annot"), envir=environment())
fold_enrichment_dist = parReplicate(cl, n = N,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
stopCluster(cl)
fold_enrichment_dist
as.data.table(fold_enrichment_dist)
N = 200
fold_enrichment_dist = parReplicate(cl, n = N,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
############################
microbenchmark::microbenchmark({
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 2500,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
},{
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 50,
expr = {
replicate(50,{
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},simplify=TRUE, USE.NAMES=TRUE)
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
}
)
?replicate
############################
microbenchmark::microbenchmark({
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 2500,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
},{
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 50,
expr = {
replicate(50,{
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
})
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
}
)
?microbenchmark::microbenchmark
############################
microbenchmark::microbenchmark({
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 900,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
},{
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 30,
expr = {
replicate(30,{
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
})
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
}, times = 25
)
############################
microbenchmark::microbenchmark({
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 900,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
},{
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = 900,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=F)
# stop the cluster
stopCluster(cl)
}, times = 25
)
17.08764 *
7
(17.08764 / 900) * 100000
((17.08764 / 900) * 100000)/60
dim(fold_enrichment_dist)
N
# set up parallel processing
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = N,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
fold_enrichment_dist
fold_enrichment_dist = as.data.table(fold_enrichment_dist)
# set up parallel processing
# create cluster
if(is.null(cores)) cores = detectCores()-1
cl <- makeCluster(cores)
# get library support needed to run the code
clusterEvalQ(cl, {library(data.table); library(MItools)})
# put objects in place that might be needed for the code
clusterExport(cl, c("net", "protein_annot"), envir=environment())
# setorder(net, IDs_interactor_viral)
fold_enrichment_dist = parReplicate(cl, n = N,
expr = {
net[, IDs_interactor_human := sample(IDs_interactor_human)]
sample_net = foldEnrichment(net, protein_annot)
# find fold_enrichment distribution in any domain for each viral protein
fold_enrichment_dist = unique(sample_net[,.(IDs_interactor_viral, sample_fold_enrichment = fold_enrichment)])[, .(sample_fold_enrichment = paste0(sample_fold_enrichment, collapse = "|")), by = IDs_interactor_viral]
setorder(fold_enrichment_dist, IDs_interactor_viral)
fold_enrichment_dist_v = fold_enrichment_dist$sample_fold_enrichment
names(fold_enrichment_dist_v) = fold_enrichment_dist$IDs_interactor_viral
fold_enrichment_dist_v
},
simplify=TRUE, USE.NAMES=TRUE)
# stop the cluster
stopCluster(cl)
fold_enrichment_dist = as.data.table(fold_enrichment_dist, keep.rownames = IDs_interactor_viral)
fold_enrichment_dist = as.data.table(fold_enrichment_dist, keep.rownames = "IDs_interactor_viral")
fold_enrichment_dist
paste0("V", 1:N)
ghfh = old_enrichment_dist[, .(IDs_interactor_viral, sampled_fold_enrichment = strsplit(.SD, "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh = fold_enrichment_dist[, .(IDs_interactor_viral, sampled_fold_enrichment = strsplit(.SD, "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = strsplit(V1, "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(V1, "\\|"))), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh
fold_enrichment_dist[,1:2]
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(c(V1,V2), "\\|"))), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(IDs_interactor_viral, sampled_fold_enrichment = strsplit(c(.SD), "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
paste0("V", 1:N)
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = strsplit(c(.SD), "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(c(V1,V2), "\\|"))), .SDcols = c("V1", "V2"), by = IDs_interactor_viral]
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(c(.SD), "\\|"))), .SDcols = c("V1", "V2"), by = IDs_interactor_viral]
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(c(unlist(.SD)), "\\|"))), .SDcols = c("V1", "V2"), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(unlist(.SD), "\\|"))), .SDcols = c("V1", "V2"), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(unlist(.SD), "\\|"))), .SDcols = c("V1", "V2", "V54"), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = strsplit(unlist(.SD), "\\|")), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh
ghfh = fold_enrichment_dist[, .(sampled_fold_enrichment = unlist(strsplit(unlist(.SD), "\\|"))), .SDcols = paste0("V", 1:N), by = IDs_interactor_viral]
ghfh
gc()
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
fegrah\
fegrah
library(devtools)
library(roxygen2)
document()
install()
rm(list = gc())
rm(list = ls()
)
gc()
gc()
library(MItools)
viral_human_net_w_domains = fread("../viral_project/processed_data_files/viral_human_net_w_domains", sep = "\t", stringsAsFactors = F)
# generate minimal information tables
viral_human_net = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_interactor_viral_degree)])
datatable(viral_human_net)
domains_proteins = unique(viral_human_net_w_domains[,.(IDs_interactor_human, IDs_domain_human, domain_frequency)])
datatable(domains_proteins)
viral_human_net_w_domains = unique(viral_human_net_w_domains[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, fold_enrichment)])
datatable(viral_human_net_w_domains)
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 2, cores = NULL)
fegrah
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 1000, cores = NULL)
fegrah
barplot(fegrah$IDs_interactor_viral)
hist(fegrah$IDs_interactor_viral)
hist(fegrah$sampled_fold_enrichment)
hist(as.numeric(fegrah$sampled_fold_enrichment))
hist(as.numeric(fegrah[IDs_interactor_viral == "A0A0K1LEV0",sampled_fold_enrichment]))
hist(as.numeric(fegrah[IDs_interactor_viral == "W6AVY5",sampled_fold_enrichment]))
fegrah = union()
fegrah = unique(fegrah)
fegrah
hist(as.numeric(fegrah[IDs_interactor_viral == "W6AVY5",sampled_fold_enrichment]))
hist(as.numeric(fegrah[IDs_interactor_viral == "A0A0K1LEV0",sampled_fold_enrichment]))
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 10000, cores = NULL)
library(devtools)
library(roxygen2)
document()
install()
library(MItools)
fegrah = foldEnrichmentDist(net = copy(viral_human_net), protein_annot = copy(domains_proteins), N = 10000, cores = NULL)
fegrah
library(devtools)
library(roxygen2)
document()
getwd()
setwd("/MItools/")
setwd("MItools")
library(devtools)
library(roxygen2)
document()
install()
document()
document()
install()
document()
install()
document()
install()
document()
install()
rm(list = ls())
document()
install()
foldEnrichment = function(net, protein_annot, frequency = T){
if(ncol(net) != 3 | mean(c("IDs_interactor_viral", "IDs_interactor_human", "IDs_interactor_viral_degree") %in% colnames(net)) != 1) stop("net contains more or less columns than required or wrong colnames")
if(ncol(protein_annot) != 3 | mean(c("IDs_interactor_human", "IDs_domain_human", "domain_frequency") %in% colnames(protein_annot)) != 1) stop("protein_annot contains more or less columns than required or wrong colnames")
# add domain annotation to the network, "nomatch = 0" deletes all proteins without domains
merged_net = unique(net[protein_annot, nomatch = 0, on = "IDs_interactor_human", allow.cartesian = T])
# count human proteins with specific domain per viral protein
# (how many proteins the domain is located in) per viral protein (ID) and human domain (ID)
merged_net[, domain_count_per_IDs_interactor_viral := .N, by = .(IDs_interactor_viral, IDs_domain_human)]
# domain frequency but per viral protein
merged_net[, domain_frequency_per_set := domain_count_per_IDs_interactor_viral / IDs_interactor_viral_degree, by = IDs_interactor_viral]
if(frequency) merged_net = merged_net[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, domain_frequency_per_set)]
if(!frequency){
# fold enrichment
merged_net[, fold_enrichment := domain_frequency_per_set / domain_frequency]
merged_net = merged_net[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, domain_frequency_per_set, fold_enrichment)]
}
return(merged_net)
}
viral_human_net_w_domains_d = fread("../viral_project/processed_data_files/viral_human_net_w_domains", sep = "\t", stringsAsFactors = F)
# generate minimal information tables
viral_human_net = unique(viral_human_net_w_domains_d[,.(IDs_interactor_viral, IDs_interactor_human, IDs_interactor_viral_degree)])
datatable(viral_human_net)
domains_proteins = unique(viral_human_net_w_domains_d[,.(IDs_interactor_human, IDs_domain_human, domain_frequency)])
datatable(domains_proteins)
viral_human_net_w_domains = unique(viral_human_net_w_domains_d[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, domain_frequency_per_IDs_interactor_viral, fold_enrichment)])
datatable(viral_human_net_w_domains)
foldEnrichment(viral_human_net, domains_proteins, frequency = T)
x = foldEnrichment(viral_human_net, domains_proteins, frequency = T)
foldEnrichment = function(net, protein_annot, frequency = T){
if(ncol(net) != 3 | mean(c("IDs_interactor_viral", "IDs_interactor_human", "IDs_interactor_viral_degree") %in% colnames(net)) != 1) stop("net contains more or less columns than required or wrong colnames")
if(ncol(protein_annot) != 3 | mean(c("IDs_interactor_human", "IDs_domain_human", "domain_frequency") %in% colnames(protein_annot)) != 1) stop("protein_annot contains more or less columns than required or wrong colnames")
# add domain annotation to the network, "nomatch = 0" deletes all proteins without domains
merged_net = unique(net[protein_annot, nomatch = 0, on = "IDs_interactor_human", allow.cartesian = T])
# count human proteins with specific domain per viral protein
# (how many proteins the domain is located in) per viral protein (ID) and human domain (ID)
merged_net[, domain_count_per_IDs_interactor_viral := .N, by = .(IDs_interactor_viral, IDs_domain_human)]
# domain frequency but per viral protein
merged_net[, domain_frequency_per_set := domain_count_per_IDs_interactor_viral / IDs_interactor_viral_degree]
if(frequency) merged_net = merged_net[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, domain_frequency_per_set)]
if(!frequency){
# fold enrichment
merged_net[, fold_enrichment := domain_frequency_per_set / domain_frequency]
merged_net = merged_net[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, domain_frequency_per_set, fold_enrichment)]
}
return(merged_net)
}
x2 = foldEnrichment(viral_human_net, domains_proteins, frequency = T)
all.equal(x, x2)
foldEnrichment = function(net, protein_annot, frequency = T){
if(ncol(net) != 3 | mean(c("IDs_interactor_viral", "IDs_interactor_human", "IDs_interactor_viral_degree") %in% colnames(net)) != 1) stop("net contains more or less columns than required or wrong colnames")
if(ncol(protein_annot) != 3 | mean(c("IDs_interactor_human", "IDs_domain_human", "domain_frequency") %in% colnames(protein_annot)) != 1) stop("protein_annot contains more or less columns than required or wrong colnames")
# add domain annotation to the network, "nomatch = 0" deletes all proteins without domains
merged_net = unique(net[protein_annot, nomatch = 0, on = "IDs_interactor_human", allow.cartesian = T])
# count human proteins with specific domain per viral protein
# (how many proteins the domain is located in) per viral protein (ID) and human domain (ID)
merged_net[, domain_count_per_IDs_interactor_viral := .N, by = .(IDs_interactor_viral, IDs_domain_human)]
# domain frequency but per viral protein
merged_net[, domain_frequency_per_set := domain_count_per_IDs_interactor_viral / IDs_interactor_viral_degree]
if(frequency) merged_net = merged_net[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, domain_frequency_per_set)]
if(!frequency){
# fold enrichment
merged_net[, fold_enrichment := domain_frequency_per_set / domain_frequency]
merged_net = merged_net[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, domain_frequency_per_set, fold_enrichment)]
}
return(merged_net)
}
foldEnrichment2 = function(net, protein_annot, frequency = T){
if(ncol(net) != 3 | mean(c("IDs_interactor_viral", "IDs_interactor_human", "IDs_interactor_viral_degree") %in% colnames(net)) != 1) stop("net contains more or less columns than required or wrong colnames")
if(ncol(protein_annot) != 3 | mean(c("IDs_interactor_human", "IDs_domain_human", "domain_frequency") %in% colnames(protein_annot)) != 1) stop("protein_annot contains more or less columns than required or wrong colnames")
# add domain annotation to the network, "nomatch = 0" deletes all proteins without domains
merged_net = unique(net[protein_annot, nomatch = 0, on = "IDs_interactor_human", allow.cartesian = T])
# count human proteins with specific domain per viral protein
# (how many proteins the domain is located in) per viral protein (ID) and human domain (ID)
merged_net[, domain_count_per_IDs_interactor_viral := .N, by = .(IDs_interactor_viral, IDs_domain_human)]
# domain frequency but per viral protein
merged_net[, domain_frequency_per_set := domain_count_per_IDs_interactor_viral / IDs_interactor_viral_degree, by = IDs_interactor_viral]
if(frequency) merged_net = merged_net[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, domain_frequency_per_set)]
if(!frequency){
# fold enrichment
merged_net[, fold_enrichment := domain_frequency_per_set / domain_frequency]
merged_net = merged_net[,.(IDs_interactor_viral, IDs_interactor_human, IDs_domain_human, domain_frequency_per_set, fold_enrichment)]
}
return(merged_net)
}
microbenchmark::microbenchmark(foldEnrichment(viral_human_net, domains_proteins, frequency = T),foldEnrichment2(viral_human_net, domains_proteins, frequency = T))
microbenchmark::microbenchmark(foldEnrichment(viral_human_net, domains_proteins, frequency = T),foldEnrichment2(viral_human_net, domains_proteins, frequency = T))
microbenchmark::microbenchmark(foldEnrichment(viral_human_net, domains_proteins, frequency = T),foldEnrichment2(viral_human_net, domains_proteins, frequency = T))
library(devtools)
library(roxygen2)
document()
install()
document()
install()
document()
install()
document()
install()
document()
install()
backgr_domain_count = 0;
net = viral_human_net;
protein_annot = domains_proteins;
data = viral_human_net_w_domains;
N = 50; cores = cores_to_use; seed = 1;
all.data = viral_human_net_w_domains_d; frequency = frequency
backgr_domain_count = 0;
net = viral_human_net;
protein_annot = domains_proteins;
data = viral_human_net_w_domains;
N = 50; cores = 3; seed = 1;
all.data = viral_human_net_w_domains_d; frequency = frequency
domains2keep = all.data[domain_count > backgr_domain_count, IDs_domain_human]
domains2keep
protein_annot
data
data[IDs_interactor_viral == "P06935",]
all.equal(domains2keep, all.data[, IDs_domain_human])
all.equal(protein_annot, protein_annot[IDs_domain_human %in% domains2keep,])
protein_annot
protein_annot[IDs_domain_human %in% domains2keep,]
all.equal(data, data[IDs_domain_human %in% domains2keep,])
data; data[IDs_domain_human %in% domains2keep,]
all.data; all.data[IDs_domain_human %in% domains2keep,]
document()
install()
document()
install()
?clusterSetRNGStream
