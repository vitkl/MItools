GET("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")
fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")
grep("all.zip",readLines("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/"), value = T)
sub("^[[:alnum:][:punct:][:blank:]]{43}", "", grep("all.zip",readLines("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/"), value = T))
sub("^[[:alnum:][:punct:][:blank:]]{3}", "", grep("all.zip",readLines("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/"), value = T))
sub("^[[:alnum:][:punct:][:blank:]]{33}", "", grep("all.zip",readLines("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/"), value = T))
fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")
fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[,.(V6, V7, V8, V9)]
fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[V9 == "all.zip",.(V6, V7, V8, V9)]
fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[V9 == "all.zip",.(V6, V7, V8, V9)][,paste0(V6,V7)]
last_release = fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[V9 == "all.zip",.(V6, V7, V8, V9)][,paste0(V6,V7)]
last_release
last_release = fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[V9 == "all.zip",.(V6, V7, V8, V9)][,paste0(V6,V7, gsub(":","_", V8))]
last_release
last_release = fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[V9 == "all.zip",.(V6, V7, V8, V9)][,paste0(V6,V7, "_", gsub(":","_", V8))]
last_release
last_release = fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[V9 == "all.zip",.(V6, V7, V8, V9)][,paste0(V6,"_",V7, "_", gsub(":","_", V8))]
last_release
paste0(pkg_dir, year(Sys.Date()), last_release)
last_release = fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[V9 == "all.zip",.(V6, V7, V8, V9)][,paste0(V6,V7, "_", gsub(":","_", V8))]
paste0(pkg_dir, year(Sys.Date()), last_release)
last_release = fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[V9 == "all.zip",.(V6, V7, V8, V9)][,paste0(V6,V7, ".", gsub(":",".", V8))]
paste0(pkg_dir, year(Sys.Date()), last_release)
last_release = fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[V9 == "all.zip",.(V6, V7, V8, V9)][,paste0(V6,V7, "_", gsub(":",".", V8))]
paste0(pkg_dir, year(Sys.Date()), last_release)
pkg_dir_last_release = paste0(pkg_dir, year(Sys.Date()), last_release)
pkg_dir_last_release
devtools::load_all()
download_PSICQUIC_Rlib
devtools::load_all()
download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
last_release = fread("ftp://ftp.ebi.ac.uk/pub/databases/intact/current/")[V9 == "all.zip",.(V6, V7, V8, V9)][,paste0(V6,V7, "_", gsub(":",".", V8))]
last_release
devtools::load_all()
download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
docu
library(devtools)
library(roxygen2)
document()
document()
5
download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
document()
devtools::load_all()
download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
document()
devtools::load_all()
queryPSICQUIC(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex",
file = filename)
document()
devtools::load_all()
download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
document()
devtools::load_all()
download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
rm(list = ls())
document()
devtools::load_all()
download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
document()
devtools::load_all()
download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
document()
devtools::install("..")
devtools::install("../queryPSICQUIC")
library(queryPSICQUIC)
download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
queryPSICQUIC:::download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
document()
devtools::install("..")
devtools::install("../queryPSICQUIC")
library(PSICQUIC)
queryPSICQUIC:::download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
document()
devtools::install("../queryPSICQUIC")
library(PSICQUIC)
queryPSICQUIC:::download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
queryPSICQUIC:::download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
gsub(":",".", "/Library/Frameworks/R.framework/Versions/3.4/Resources/library/queryPSICQUIC/data/2017Jun7_10.03/query_id:P74565 AND detmethod:\"MI:0018\"tab27imex")
filename = "/Library/Frameworks/R.framework/Versions/3.4/Resources/library/queryPSICQUIC/data/2017Jun7_10.03/query_id:P74565 AND detmethod:\"MI:0018\"tab27imex"
filename = gsub(":",".", filename)
filename
filename = gsub("\"",".", filename)
filename = gsub(":",".", filename)
filename
filename = gsub(" ",".", filename)
filename
filename = "/Library/Frameworks/R.framework/Versions/3.4/Resources/library/queryPSICQUIC/data/2017Jun7_10.03/query_id:P74565 AND detmethod:\"MI:0018\"tab27imex.tsv"
filename = gsub(":",".", filename)
filename = gsub("\"",".", filename)
filename = gsub(" ",".", filename)
if(file.exists(filename)){
message("found local copy of the data from the latest release ... reading into R")
}
filename
?download_PSICQUIC_Rlib
document()
library(devtools)
library(roxygen2)
document()
devtools::install("..")
devtools::install("../queryPSICQUIC")
library(queryPSICQUIC)
queryPSICQUIC:::download_PSICQUIC_Rlib(query = "id:P74565 AND detmethod:\"MI:0018\"",
format = "tab27",
database = "imex")
document()
devtools::install("../queryPSICQUIC")
document()
devtools::install("../queryPSICQUIC")
taxid = "9606"
paste0("taxidA:",taxid," AND ", "taxidB:",taxid)
document()
devtools::install("../queryPSICQUIC")
queryPSICQUICrlib(query = paste0("taxidA:",taxid," AND ", "taxidB:",taxid),
format = "tab25",
database = database)
queryPSICQUIC:::queryPSICQUICrlib(query = paste0("taxidA:",taxid," AND ", "taxidB:",taxid),
format = "tab25",
database = database)
database = "imex"
queryPSICQUIC:::queryPSICQUICrlib(query = paste0("taxidA:",taxid," AND ", "taxidB:",taxid),
format = "tab25",
database = database)
document()
devtools::install("../queryPSICQUIC")
queryPSICQUIC:::queryPSICQUICrlib(query = paste0("taxidA:",taxid," AND ", "taxidB:",taxid),
format = "tab25",
database = database)
queryPSICQUIC:::queryPSICQUICrlib(query = paste0("taxidA:",taxid," AND ", "taxidB:",taxid),
format = "tab25",
database = database)
library(devtools)
library(roxygen2)
document()
devtools::install("../queryPSICQUIC")
devtools::install("../MItoolkit")
library(devtools)
library(roxygen2)
document()
devtools::install("../MItoolkit")
taxid = "9606"
n_inter = 200
degree = NULL
database = "imex"
seed = 1
protein_only = TRUE
full_interactome = queryPSICQUICrlib(query = paste0("taxidA:",taxid," AND ", "taxidB:",taxid),
format = "tab25",
database = database)
library(devtools)
library(roxygen2)
document()
install("../MItools")
library(MItools)
uninstall("MItools")
uninstall("MItoolkit")
uninstall()
install("../MItools")
library(MItools)
?randomInteractome
document()
install("../MItools")
library(MItools)
taxid = "9606"
n_inter = 200
degree = NULL
database = "imex"
seed = 1
protein_only = TRUE
full_interactome = queryPSICQUICrlib(query = paste0("taxidA:",taxid," AND ", "taxidB:",taxid),
format = "tab25",
database = database)
full_interactome = MItools:::queryPSICQUICrlib(query = paste0("taxidA:",taxid," AND ", "taxidB:",taxid),
format = "tab25",
database = database)
document()
install("../MItools")
full_interactome = MItools:::queryPSICQUICrlib(query = paste0("taxidA:",taxid," AND ", "taxidB:",taxid),
format = "tab25",
database = database)
full_interactome = queryPSICQUIC:::queryPSICQUICrlib(query = paste0("taxidA:",taxid," AND ", "taxidB:",taxid),
format = "tab25",
database = database)
document()
install("../MItools")
knitr::opts_chunk$set(echo = TRUE)
if(!file.exists("./data/viral_interactions.txt")){
queryPSICQUIC(query = "species:10239",
format = "tab25",
database = "imex",
file = "./data_files/viral_interactions.txt")
}
library(MItools)
if(!file.exists("./data/viral_interactions.txt")){
queryPSICQUIC(query = "species:10239",
format = "tab25",
database = "imex",
file = "./data_files/viral_interactions.txt")
}
if(!file.exists("./data/viral_interactions.txt")){
queryPSICQUIC(query = "species:10239",
format = "tab25",
database = "imex",
file = "./data_files/viral_interactions.txt")
}
if(!file.exists("./data/viral_interactions.txt")){
queryPSICQUIC(query = "species:10239",
format = "tab25",
database = "imex",
file = "./data/viral_interactions.txt")
}
all_viral_interaction = fread("./data/viral_interactions.txt", stringsAsFactors = F)
# clean the data in the table to make it more useble
all_viral_interaction = cleanMITAB(all_viral_interaction)
# filter only human-viral interactions
all_viral_interaction = all_viral_interaction[Taxid_interactor_A == "9606" | Taxid_interactor_B == "9606",]
all_viral_interaction = unique(all_viral_interaction)
# download full human interactome
full =
?fullInteractome
full = fullInteractome(taxid = "9606", database = "imex", format = "tab25", clean = TRUE, protein_only = TRUE, directory = "./data/")
full_degree = edgelist2degree(full)
full_degree
?edgelist2degree
viral_proteins = unique(c(all_viral_interaction[Taxid_interactor_A != "9606", IDs_interactor_A], all_viral_interaction[Taxid_interactor_B != "9606", IDs_interactor_B]))
viral_degree = edgelist2degree(all_viral_interaction)[ID %in% viral_proteins,]
viral_degree
viral_proteins
human_viral_proteins = unique(c(all_viral_interaction[Taxid_interactor_A == "9606", IDs_interactor_A], all_viral_interaction[Taxid_interactor_B == "9606", IDs_interactor_B]))
viral_human_degree_dist = edgelist2degreeFreq(all_viral_interaction, prots = human_viral_proteins)
viral_degree_dist = edgelist2degreeFreq(all_viral_interaction, prots = viral_proteins)
full_degree = edgelist2degree(full)
# identify viral proteins
viral_proteins = unique(c(all_viral_interaction[Taxid_interactor_A != "9606", IDs_interactor_A], all_viral_interaction[Taxid_interactor_B != "9606", IDs_interactor_B]))
# calculate viral degree distribution
viral_degree_dist = edgelist2degreeFreq(all_viral_interaction, prots = viral_proteins)
# identify viral-interacting human proteins
human_viral_proteins = unique(c(all_viral_interaction[Taxid_interactor_A == "9606", IDs_interactor_A], all_viral_interaction[Taxid_interactor_B == "9606", IDs_interactor_B]))
# calculate viral-interacting human protein degree distribution
viral_human_degree_dist = edgelist2degreeFreq(all_viral_interaction, prots = human_viral_proteins)
viral_human_degree_dist
viral_degree_dist
plot(viral_degree_dist$N, viral_degree_dist$degree_freq)
plot(viral_degree_dist$N, viral_degree_dist$degree_freq, log = "xy")
plot(viral_degree_dist$N, viral_degree_dist$degree_freq, log = "xy", ylab = "degree frequency, log-scale", xlab = "degree, log-scale")
plot(viral_degree_dist$N, viral_degree_dist$degree_freq, log = "xy", ylab = "degree frequency, log-scale", xlab = "degree, log-scale", las=1)
plot(viral_human_degree_dist$N, viral_human_degree_dist$degree_freq, log = "xy", ylab = "degree frequency, log-scale", xlab = "degree, log-scale", las=1)
plot(viral_human_degree_dist$N, viral_human_degree_dist$degree_freq, log = "xy", ylab = "degree frequency, log-scale", xlab = "degree, log-scale", las=1)
plot(viral_degree_dist$N, viral_degree_dist$degree_freq, log = "xy", ylab = "degree frequency, log-scale", xlab = "degree, log-scale", las=1)
full_degree_dist = edgelist2degreeFreq(full)
full_degree_dist
plot(full_degree_dist$N, full_degree_dist$degree_freq,
log = "xy",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(viral_degree_dist$N, viral_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000)
ylab = "degree frequency, log-scale",
plot(viral_degree_dist$N, viral_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(viral_human_degree_dist$N, viral_human_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(full_degree_dist$N, full_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(viral_human_degree_dist$N, viral_human_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
main = "degree distribution of viral-interacting human proteins (human-human interactions)",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
viral_human_human_degree_dist = edgelist2degreeFreq(full, prots = human_viral_proteins)
plot(viral_human_human_degree_dist$N, viral_human_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
main = "degree distribution of viral-interacting human proteins (human-human interactions)",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(viral_human_human_degree_dist$N, viral_human_human_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
main = "degree distribution of viral-interacting human proteins (human-human interactions)",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(full_degree_dist$N, full_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
main = "degree distribution in human interactome",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(viral_human_human_degree_dist$N, viral_human_human_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
main = "degree distribution of viral-interacting human proteins (human-human interactions)",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(viral_human_human_degree_dist$N, viral_human_human_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
main = "degree distribution of viral-interacting human proteins \n (human-human interactions)",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(viral_human_human_degree_dist$N, viral_human_human_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
main = "degree distribution of viral-interacting human proteins \n - human-human interactions -",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(viral_human_degree_dist$N, viral_human_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
main = "degree distribution of viral-interacting human proteins \n - human-viral interactions -",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(full_degree_dist$N, full_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000),
main = "degree distribution in human interactome \n - human-human interactions -",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(full_degree_dist$N, full_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000), ylim = c(5e-05, 1),
main = "degree distribution in human interactome \n - human-human interactions -",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(full_degree_dist$N, full_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000), ylim = c(5e-05, 0.7),
main = "degree distribution in human interactome \n - human-human interactions -",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
par(2,2)
full_degree = edgelist2degree(full)
full_degree = edgelist2degree(full)
full_degree_dist = edgelist2degreeFreq(full)
full_degree_dist = edgelist2degreeFreq(full)
plot(full_degree_dist$N, full_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000), ylim = c(5e-05, 1),
main = "degree distribution in human interactome \n - human-human interactions -",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
plot(full_degree_dist$N, full_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000), ylim = c(5e-05, 1),
main = "degree distribution in human interactome \n - human-human interactions -",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
viral_proteins = unique(c(all_viral_interaction[Taxid_interactor_A != "9606", IDs_interactor_A], all_viral_interaction[Taxid_interactor_B != "9606", IDs_interactor_B]))
viral_degree_dist = edgelist2degreeFreq(all_viral_interaction, prots = viral_proteins)
viral_degree_dist = edgelist2degreeFreq(all_viral_interaction, prots = viral_proteins)
plot(viral_degree_dist$N, viral_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000), ylim = c(5e-05, 1),
main = "degree distribution of viral proteins",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
human_viral_proteins = unique(c(all_viral_interaction[Taxid_interactor_A == "9606", IDs_interactor_A], all_viral_interaction[Taxid_interactor_B == "9606", IDs_interactor_B]))
viral_human_degree_dist = edgelist2degreeFreq(all_viral_interaction, prots = human_viral_proteins)
plot(viral_human_degree_dist$N, viral_human_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000), ylim = c(5e-05, 1),
main = "degree distribution of viral-interacting human proteins \n - human-viral interactions -",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
viral_human_human_degree_dist = edgelist2degreeFreq(full, prots = human_viral_proteins)
plot(viral_human_human_degree_dist$N, viral_human_human_degree_dist$degree_freq,
log = "xy", xlim = c(1, 1000), ylim = c(5e-05, 1),
main = "degree distribution of viral-interacting human proteins \n - human-human interactions -",
ylab = "degree frequency, log-scale",
xlab = "degree, log-scale",
las=1)
?par
install.packages("microbenchmark")
library(microbenchmark)
library(lineprof)
install.packages(lineprof)
install.packages("lineprof")
install.packages("profvis")
library(profvis)
?randomInteractome
library(MItools)
?randomInteractome
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(MItools)
})
profvis({
random = randomInteractome(MITABdata = full, degree_data = full_degree, n_prot = 500, degree_dist = viral_human_human_degree_dist)
})
random
random$interactome
##' Retrieve molecular interactions for the random set of proteins (of a particular taxon)
##' @name randomInteractome
##' @author Vitalii Kleshchevnikov
##' @param MITABdata data.table containing pre-loaded molecular interaction data as returned by \code{\link{queryPSICQUICrlib}}, usefull for taking multiple samples, the default in NULL
##' @param degree_data data.table containing pre-calculated (using \code{\link{edgelist2degree}}) degree for each node in MITABdata, usefull for taking multiple samples, the default in NULL
##' @param n_prot integer (1L), the number of proteins for which to retrieve the random set of interactions
##' @param degree_dist data.table, specifies the degree frequency () for each degree (N) to produce the network with the specific degree distribution, if set to NULL (default) the degree distribution will correspond to that of \code{taxid} interactome
##' @return list of two elements: 1. interactome - data.table containing molecular interaction data in either of these two formats:
##' @return if \code{clean} is TRUE: contains columns as described in \code{\link{cleanMITAB}};
##' @return if \code{clean} is FALSE: contains a standard set of columns for MITAB2.5 or MITAB2.7 depending on \code{format};
##' @return 2. seed - character vector containing IDs of proteins used as a seed to retrieve molecular interactions
##' @details Random network can be specified to have specific degree distribution. If the (\code{degree} parameter is set \code{taxid} proteins will be split by degree and from each degree group a sample of the size specified by how many times specific degree number is repeated in \code{degree} will be taken.
##' @details If the degree distribution is not specified a sample of \code{n_prot} is taken from all proteins which have interaction data available in the \code{database} for \code{taxid}. In this case, the degree distribution of the resulting set of proteins will be similar to the degree distribution in the interactome of \code{taxid} in \code{database}.
##' @details \code{randomInteractome} retrieves molecular interactions using \code{\link{fullInteractome}}
##' @import data.table
##' @export randomInteractome
##' @examples
##' # retrive the interactome using PSICQIUC servise (or by reading local copy) from IMEx databases for a list of 200 random human (9606) proteins, not specifying their degree distribution
##' set.seed(1)
##' random = randomInteractome(n_prot = 200, degree_dist = NULL, taxid = "9606", database = "imex", protein_only = TRUE)
##'
##' # retrive the interactome from MITABdata for a list of 200 random human (9606) proteins, not specifying their degree_dist distribution
##' full = fullInteractome(taxid = "9606", database = "imex", format = "tab25", clean = TRUE, protein_only = TRUE)
##' set.seed(1)
##' random = randomInteractome(MITABdata = full, n_prot = 200, degree_dist = NULL)
##'
##' # retrive the interactome using PSICQIUC servise (or by reading local copy from a specified directory) from IMEx databases for a list of 200 random human (9606) proteins, not specifying their degree_dist distribution
##' set.seed(1)
##' random = randomInteractome(n_prot = 200, degree_dist = NULL, taxid = "9606", database = "imex", protein_only = TRUE, directory = "./data/")
randomInteractome = function(MITABdata = NULL, degree_data = NULL, n_prot, degree_dist = NULL, ...){
# if MITABdata is NULL retrive the cleaned full Interactome
if(is.null(MITABdata)) full_interactome_clean = fullInteractome(..., format = "tab25", clean = TRUE)
# if MITABdata is supplied use that data
if(!is.null(MITABdata)) full_interactome_clean = MITABdata
# check if the data has necessary columns:
if(mean(c("pair_id") %in% colnames(full_interactome_clean)) != 1) stop("MITABdata is in the wrong format: no pair_id column")
# get interactors
#interactors = full_interactome_clean[, unique(unlist(strsplit(pair_id, "\\|")))]
interactors = full_interactome_clean[, unique(c(IDs_interactor_A, IDs_interactor_B))]
# if the degree_dist distribution is not specified - sample n_prot of interactors
if(is.null(degree_dist)){
random_interactors = sample(interactors, n_prot)
}
# if the degree_dist distribution is specified - calculate degree_dist of each interactor (the number of interacting partners per interactor)
if(!is.null(degree_dist)){
if(mean(c("N", "degree_freq") %in% colnames(degree_dist)) != 1) stop("degree_dist does not contain \"N\" and \"degree_freq\" columns")
# calculate degree_data data if not provided
if(is.null(degree_data)) degree_data = edgelist2degree(full_interactome_clean[,.(pair_id)])
# stop if degree_data doesn't match MITABdata
if(!is.null(degree_data) & mean(degree_data$ID %in% interactors) != 1) stop("degree_data doesn't contain degree_dist information for all nodes in MITABdata")
# attach each interactor degree_dist for the sample
degree_data = degree_data[degree_dist, on = "N"]
random_interactors = sample(x = degree_data[degree_freq != 0, ID],
size = n_prot,
prob = degree_data[degree_freq != 0, degree_freq])
}
# retrive interactions for a set of random proteins
return(list(interactome = interactors2interactions(full_interactome_clean, random_interactors), seed_proteins = random_interactors))
}
profvis({
random = randomInteractome(MITABdata = full, degree_data = full_degree, n_prot = 500, degree_dist = viral_human_human_degree_dist)
})
profvis({
random = randomInteractome(MITABdata = full, degree_data = full_degree, n_prot = 500)
})
?profvis
profvis({
random = randomInteractome(MITABdata = full, degree_data = full_degree, n_prot = 500, degree_dist = viral_human_human_degree_dist, interval = 1e-3)
})
profvis({
random = randomInteractome(MITABdata = full, degree_data = full_degree, n_prot = 500, degree_dist = viral_human_human_degree_dist, interval = 0.005)
})
profvis({
random = randomInteractome(MITABdata = full, degree_data = full_degree, n_prot = 500, degree_dist = viral_human_human_degree_dist)
}, interval = 0.005)
setClass("PPInetwork", representation = list(interactome = "data.table", interactors = "character", degree_data = "data.table"))
PPInetwork()
new("PPInetwork")
